// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// TraceReg
Rcpp::List TraceReg(arma::mat& X, arma::vec& y, double lambda, arma::mat& B_init, arma::mat& B, double gamma, int MAXIT, double eps, bool quiet);
RcppExport SEXP _RobustLRL_TraceReg(SEXP XSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP B_initSEXP, SEXP BSEXP, SEXP gammaSEXP, SEXP MAXITSEXP, SEXP epsSEXP, SEXP quietSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type B_init(B_initSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int >::type MAXIT(MAXITSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< bool >::type quiet(quietSEXP);
    rcpp_result_gen = Rcpp::wrap(TraceReg(X, y, lambda, B_init, B, gamma, MAXIT, eps, quiet));
    return rcpp_result_gen;
END_RCPP
}
// deSubGD_single
Rcpp::List deSubGD_single(arma::mat& X, arma::vec& y, int d1, int d2, arma::mat& adjacency_matrix, arma::mat& B_init, arma::vec& betaT, double tau, int T, double a, double b, double lambda, double eps, bool quiet);
RcppExport SEXP _RobustLRL_deSubGD_single(SEXP XSEXP, SEXP ySEXP, SEXP d1SEXP, SEXP d2SEXP, SEXP adjacency_matrixSEXP, SEXP B_initSEXP, SEXP betaTSEXP, SEXP tauSEXP, SEXP TSEXP, SEXP aSEXP, SEXP bSEXP, SEXP lambdaSEXP, SEXP epsSEXP, SEXP quietSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type d1(d1SEXP);
    Rcpp::traits::input_parameter< int >::type d2(d2SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type adjacency_matrix(adjacency_matrixSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type B_init(B_initSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type betaT(betaTSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< bool >::type quiet(quietSEXP);
    rcpp_result_gen = Rcpp::wrap(deSubGD_single(X, y, d1, d2, adjacency_matrix, B_init, betaT, tau, T, a, b, lambda, eps, quiet));
    return rcpp_result_gen;
END_RCPP
}
// deSubGD
Rcpp::List deSubGD(arma::mat& X, arma::vec& y, int d1, int d2, arma::mat& adjacency_matrix, arma::mat& B_init, arma::vec& betaT, int T, double a, double b, double tau, int nlambda, double lambda_factor, double lambda_max, double eps, bool quiet);
RcppExport SEXP _RobustLRL_deSubGD(SEXP XSEXP, SEXP ySEXP, SEXP d1SEXP, SEXP d2SEXP, SEXP adjacency_matrixSEXP, SEXP B_initSEXP, SEXP betaTSEXP, SEXP TSEXP, SEXP aSEXP, SEXP bSEXP, SEXP tauSEXP, SEXP nlambdaSEXP, SEXP lambda_factorSEXP, SEXP lambda_maxSEXP, SEXP epsSEXP, SEXP quietSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type d1(d1SEXP);
    Rcpp::traits::input_parameter< int >::type d2(d2SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type adjacency_matrix(adjacency_matrixSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type B_init(B_initSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type betaT(betaTSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< int >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_factor(lambda_factorSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_max(lambda_maxSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< bool >::type quiet(quietSEXP);
    rcpp_result_gen = Rcpp::wrap(deSubGD(X, y, d1, d2, adjacency_matrix, B_init, betaT, T, a, b, tau, nlambda, lambda_factor, lambda_max, eps, quiet));
    return rcpp_result_gen;
END_RCPP
}
// deTraceReg
Rcpp::List deTraceReg(arma::mat& X, arma::vec& y, int d1, int d2, arma::mat& adjacency_matrix, arma::mat& B_init, arma::vec& betaT, int T_inner, double tau_penalty_factor, int nlambda, double lambda_factor, double lambda_max, bool quiet);
RcppExport SEXP _RobustLRL_deTraceReg(SEXP XSEXP, SEXP ySEXP, SEXP d1SEXP, SEXP d2SEXP, SEXP adjacency_matrixSEXP, SEXP B_initSEXP, SEXP betaTSEXP, SEXP T_innerSEXP, SEXP tau_penalty_factorSEXP, SEXP nlambdaSEXP, SEXP lambda_factorSEXP, SEXP lambda_maxSEXP, SEXP quietSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type d1(d1SEXP);
    Rcpp::traits::input_parameter< int >::type d2(d2SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type adjacency_matrix(adjacency_matrixSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type B_init(B_initSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type betaT(betaTSEXP);
    Rcpp::traits::input_parameter< int >::type T_inner(T_innerSEXP);
    Rcpp::traits::input_parameter< double >::type tau_penalty_factor(tau_penalty_factorSEXP);
    Rcpp::traits::input_parameter< int >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_factor(lambda_factorSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_max(lambda_maxSEXP);
    Rcpp::traits::input_parameter< bool >::type quiet(quietSEXP);
    rcpp_result_gen = Rcpp::wrap(deTraceReg(X, y, d1, d2, adjacency_matrix, B_init, betaT, T_inner, tau_penalty_factor, nlambda, lambda_factor, lambda_max, quiet));
    return rcpp_result_gen;
END_RCPP
}
// decentralizedTraceQR_inner
Rcpp::List decentralizedTraceQR_inner(arma::cube& X, arma::vec& yt, arma::mat& adjacency_matrix, arma::vec& rho, arma::vec& omega, arma::cube& B_outer, double tau_penalty, double lambda, int T_inner);
RcppExport SEXP _RobustLRL_decentralizedTraceQR_inner(SEXP XSEXP, SEXP ytSEXP, SEXP adjacency_matrixSEXP, SEXP rhoSEXP, SEXP omegaSEXP, SEXP B_outerSEXP, SEXP tau_penaltySEXP, SEXP lambdaSEXP, SEXP T_innerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type yt(ytSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type adjacency_matrix(adjacency_matrixSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type B_outer(B_outerSEXP);
    Rcpp::traits::input_parameter< double >::type tau_penalty(tau_penaltySEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type T_inner(T_innerSEXP);
    rcpp_result_gen = Rcpp::wrap(decentralizedTraceQR_inner(X, yt, adjacency_matrix, rho, omega, B_outer, tau_penalty, lambda, T_inner));
    return rcpp_result_gen;
END_RCPP
}
// decentralizedTraceQR_cpp
Rcpp::List decentralizedTraceQR_cpp(arma::mat& X, arma::vec& y, int d1, int d2, arma::mat& adjacency_matrix, arma::mat& B_init, arma::vec& betaT, int s, double tau, int T_outer, int T_inner, double c0, double tau_penalty_factor, int nlambda, double lambda_factor, double lambda_max, bool quiet);
RcppExport SEXP _RobustLRL_decentralizedTraceQR_cpp(SEXP XSEXP, SEXP ySEXP, SEXP d1SEXP, SEXP d2SEXP, SEXP adjacency_matrixSEXP, SEXP B_initSEXP, SEXP betaTSEXP, SEXP sSEXP, SEXP tauSEXP, SEXP T_outerSEXP, SEXP T_innerSEXP, SEXP c0SEXP, SEXP tau_penalty_factorSEXP, SEXP nlambdaSEXP, SEXP lambda_factorSEXP, SEXP lambda_maxSEXP, SEXP quietSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type d1(d1SEXP);
    Rcpp::traits::input_parameter< int >::type d2(d2SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type adjacency_matrix(adjacency_matrixSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type B_init(B_initSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type betaT(betaTSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< int >::type T_outer(T_outerSEXP);
    Rcpp::traits::input_parameter< int >::type T_inner(T_innerSEXP);
    Rcpp::traits::input_parameter< double >::type c0(c0SEXP);
    Rcpp::traits::input_parameter< double >::type tau_penalty_factor(tau_penalty_factorSEXP);
    Rcpp::traits::input_parameter< int >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_factor(lambda_factorSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_max(lambda_maxSEXP);
    Rcpp::traits::input_parameter< bool >::type quiet(quietSEXP);
    rcpp_result_gen = Rcpp::wrap(decentralizedTraceQR_cpp(X, y, d1, d2, adjacency_matrix, B_init, betaT, s, tau, T_outer, T_inner, c0, tau_penalty_factor, nlambda, lambda_factor, lambda_max, quiet));
    return rcpp_result_gen;
END_RCPP
}
// decentralizedTraceQR_lambda_cpp
Rcpp::List decentralizedTraceQR_lambda_cpp(arma::mat& X, arma::vec& y, int d1, int d2, arma::mat& adjacency_matrix, arma::mat& B_init, arma::vec& betaT, int s, double tau, int T_outer, int T_inner, double c0, double tau_penalty_factor, double f0, double lambda, bool quiet);
RcppExport SEXP _RobustLRL_decentralizedTraceQR_lambda_cpp(SEXP XSEXP, SEXP ySEXP, SEXP d1SEXP, SEXP d2SEXP, SEXP adjacency_matrixSEXP, SEXP B_initSEXP, SEXP betaTSEXP, SEXP sSEXP, SEXP tauSEXP, SEXP T_outerSEXP, SEXP T_innerSEXP, SEXP c0SEXP, SEXP tau_penalty_factorSEXP, SEXP f0SEXP, SEXP lambdaSEXP, SEXP quietSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type d1(d1SEXP);
    Rcpp::traits::input_parameter< int >::type d2(d2SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type adjacency_matrix(adjacency_matrixSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type B_init(B_initSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type betaT(betaTSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< int >::type T_outer(T_outerSEXP);
    Rcpp::traits::input_parameter< int >::type T_inner(T_innerSEXP);
    Rcpp::traits::input_parameter< double >::type c0(c0SEXP);
    Rcpp::traits::input_parameter< double >::type tau_penalty_factor(tau_penalty_factorSEXP);
    Rcpp::traits::input_parameter< double >::type f0(f0SEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< bool >::type quiet(quietSEXP);
    rcpp_result_gen = Rcpp::wrap(decentralizedTraceQR_lambda_cpp(X, y, d1, d2, adjacency_matrix, B_init, betaT, s, tau, T_outer, T_inner, c0, tau_penalty_factor, f0, lambda, quiet));
    return rcpp_result_gen;
END_RCPP
}
// decentralizedTraceQR_local_cpp
Rcpp::List decentralizedTraceQR_local_cpp(arma::mat& X, arma::vec& y, int d1, int d2, arma::mat& adjacency_matrix, arma::mat& B_init, arma::vec& betaT, int s, double tau, int T_outer, int T_inner, double c0, double tau_penalty_factor, int nlambda, double lambda_factor, double lambda_max, bool quiet);
RcppExport SEXP _RobustLRL_decentralizedTraceQR_local_cpp(SEXP XSEXP, SEXP ySEXP, SEXP d1SEXP, SEXP d2SEXP, SEXP adjacency_matrixSEXP, SEXP B_initSEXP, SEXP betaTSEXP, SEXP sSEXP, SEXP tauSEXP, SEXP T_outerSEXP, SEXP T_innerSEXP, SEXP c0SEXP, SEXP tau_penalty_factorSEXP, SEXP nlambdaSEXP, SEXP lambda_factorSEXP, SEXP lambda_maxSEXP, SEXP quietSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type d1(d1SEXP);
    Rcpp::traits::input_parameter< int >::type d2(d2SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type adjacency_matrix(adjacency_matrixSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type B_init(B_initSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type betaT(betaTSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< int >::type T_outer(T_outerSEXP);
    Rcpp::traits::input_parameter< int >::type T_inner(T_innerSEXP);
    Rcpp::traits::input_parameter< double >::type c0(c0SEXP);
    Rcpp::traits::input_parameter< double >::type tau_penalty_factor(tau_penalty_factorSEXP);
    Rcpp::traits::input_parameter< int >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_factor(lambda_factorSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_max(lambda_maxSEXP);
    Rcpp::traits::input_parameter< bool >::type quiet(quietSEXP);
    rcpp_result_gen = Rcpp::wrap(decentralizedTraceQR_local_cpp(X, y, d1, d2, adjacency_matrix, B_init, betaT, s, tau, T_outer, T_inner, c0, tau_penalty_factor, nlambda, lambda_factor, lambda_max, quiet));
    return rcpp_result_gen;
END_RCPP
}
// mQR
Rcpp::List mQR(arma::mat& X, arma::vec& y, double tau, double lambda, arma::mat& B_init, arma::mat& B, double gamma, int MAXIT, double eps, bool quiet);
RcppExport SEXP _RobustLRL_mQR(SEXP XSEXP, SEXP ySEXP, SEXP tauSEXP, SEXP lambdaSEXP, SEXP B_initSEXP, SEXP BSEXP, SEXP gammaSEXP, SEXP MAXITSEXP, SEXP epsSEXP, SEXP quietSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type B_init(B_initSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int >::type MAXIT(MAXITSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< bool >::type quiet(quietSEXP);
    rcpp_result_gen = Rcpp::wrap(mQR(X, y, tau, lambda, B_init, B, gamma, MAXIT, eps, quiet));
    return rcpp_result_gen;
END_RCPP
}
// pmax_arma
arma::vec pmax_arma(arma::vec x, double bound);
RcppExport SEXP _RobustLRL_pmax_arma(SEXP xSEXP, SEXP boundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type bound(boundSEXP);
    rcpp_result_gen = Rcpp::wrap(pmax_arma(x, bound));
    return rcpp_result_gen;
END_RCPP
}
// kernel
arma::mat kernel(arma::mat E, arma::vec h);
RcppExport SEXP _RobustLRL_kernel(SEXP ESEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type E(ESEXP);
    Rcpp::traits::input_parameter< arma::vec >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(kernel(E, h));
    return rcpp_result_gen;
END_RCPP
}
// mod
double mod(arma::vec v);
RcppExport SEXP _RobustLRL_mod(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(mod(v));
    return rcpp_result_gen;
END_RCPP
}
// quantile_lossCPP
double quantile_lossCPP(arma::vec x, double tau);
RcppExport SEXP _RobustLRL_quantile_lossCPP(SEXP xSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(quantile_lossCPP(x, tau));
    return rcpp_result_gen;
END_RCPP
}
// cqr_loss_cpp
double cqr_loss_cpp(arma::mat X, arma::vec y, arma::vec beta, arma::vec alpha, arma::vec& tau);
RcppExport SEXP _RobustLRL_cqr_loss_cpp(SEXP XSEXP, SEXP ySEXP, SEXP betaSEXP, SEXP alphaSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(cqr_loss_cpp(X, y, beta, alpha, tau));
    return rcpp_result_gen;
END_RCPP
}
// calN_j_cpp
arma::uvec calN_j_cpp(int n, int j);
RcppExport SEXP _RobustLRL_calN_j_cpp(SEXP nSEXP, SEXP jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    rcpp_result_gen = Rcpp::wrap(calN_j_cpp(n, j));
    return rcpp_result_gen;
END_RCPP
}
// soft_thresholding_cpp
arma::vec soft_thresholding_cpp(arma::vec x, double t);
RcppExport SEXP _RobustLRL_soft_thresholding_cpp(SEXP xSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(soft_thresholding_cpp(x, t));
    return rcpp_result_gen;
END_RCPP
}
// SVT_cpp
arma::mat SVT_cpp(arma::mat& B, double lambda);
RcppExport SEXP _RobustLRL_SVT_cpp(SEXP BSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(SVT_cpp(B, lambda));
    return rcpp_result_gen;
END_RCPP
}
// SVT_vec_cpp
arma::vec SVT_vec_cpp(arma::vec& beta, int d1, int d2, double lambda);
RcppExport SEXP _RobustLRL_SVT_vec_cpp(SEXP betaSEXP, SEXP d1SEXP, SEXP d2SEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type d1(d1SEXP);
    Rcpp::traits::input_parameter< int >::type d2(d2SEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(SVT_vec_cpp(beta, d1, d2, lambda));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RobustLRL_TraceReg", (DL_FUNC) &_RobustLRL_TraceReg, 9},
    {"_RobustLRL_deSubGD_single", (DL_FUNC) &_RobustLRL_deSubGD_single, 14},
    {"_RobustLRL_deSubGD", (DL_FUNC) &_RobustLRL_deSubGD, 16},
    {"_RobustLRL_deTraceReg", (DL_FUNC) &_RobustLRL_deTraceReg, 13},
    {"_RobustLRL_decentralizedTraceQR_inner", (DL_FUNC) &_RobustLRL_decentralizedTraceQR_inner, 9},
    {"_RobustLRL_decentralizedTraceQR_cpp", (DL_FUNC) &_RobustLRL_decentralizedTraceQR_cpp, 17},
    {"_RobustLRL_decentralizedTraceQR_lambda_cpp", (DL_FUNC) &_RobustLRL_decentralizedTraceQR_lambda_cpp, 16},
    {"_RobustLRL_decentralizedTraceQR_local_cpp", (DL_FUNC) &_RobustLRL_decentralizedTraceQR_local_cpp, 17},
    {"_RobustLRL_mQR", (DL_FUNC) &_RobustLRL_mQR, 10},
    {"_RobustLRL_pmax_arma", (DL_FUNC) &_RobustLRL_pmax_arma, 2},
    {"_RobustLRL_kernel", (DL_FUNC) &_RobustLRL_kernel, 2},
    {"_RobustLRL_mod", (DL_FUNC) &_RobustLRL_mod, 1},
    {"_RobustLRL_quantile_lossCPP", (DL_FUNC) &_RobustLRL_quantile_lossCPP, 2},
    {"_RobustLRL_cqr_loss_cpp", (DL_FUNC) &_RobustLRL_cqr_loss_cpp, 5},
    {"_RobustLRL_calN_j_cpp", (DL_FUNC) &_RobustLRL_calN_j_cpp, 2},
    {"_RobustLRL_soft_thresholding_cpp", (DL_FUNC) &_RobustLRL_soft_thresholding_cpp, 2},
    {"_RobustLRL_SVT_cpp", (DL_FUNC) &_RobustLRL_SVT_cpp, 2},
    {"_RobustLRL_SVT_vec_cpp", (DL_FUNC) &_RobustLRL_SVT_vec_cpp, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_RobustLRL(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
